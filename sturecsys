#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_STUDENTS 100
#define FILE_NAME "students.dat"
typedef struct 
{
  int id;
  char name[50];
  int age;
  float cgpa;
} 
Student;
void addStudent();
void displayStudents();
void searchStudent();
void updateStudent();
void deleteStudent();
void saveToFile();
void loadFromFile();
Student students[MAX_STUDENTS];
int studentCount = 0;
int main() 
{
  loadFromFile();
  int choice;
  do 
  {
    printf("\nStudent Record Management System\n");
    printf("1. Add Student\n");
    printf("2. Display Students\n");
    printf("3. Search Student\n");
    printf("4. Update Student\n");
    printf("5. Delete Student\n");
    printf("6. Exit\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);
      switch (choice) 
      {
        case 1: addStudent();
        break;
        case 2: displayStudents(); 
        break;
        case 3: searchStudent(); 
        break;
        case 4: updateStudent(); 
        break;
        case 5: deleteStudent();
        break;
        case 6: saveToFile(); 
        break;
        default: printf("Invalid choice!\n");
      }
} 
while (choice!=6);
    return 0;
}
void addStudent()
{
  if(studentCount<MAX_STUDENTS) 
  {
      Student s;
      printf("Enter ID: ");
      scanf("%d", &s.id);
      printf("Enter Name: ");
      getchar();
      fgets(s.name, sizeof(s.name), stdin);
      s.name[strcspn(s.name, "\n")] = '\0';
      printf("Enter Age: ");
      scanf("%d", &s.age);
      printf("Enter CGPA: ");
      scanf("%f", &s.cgpa);
      students[studentCount++] = s;
      printf("Student added successfully!\n");
    } 
    else 
    {
      printf("Maximum student limit reached!\n");
    }
}
void displayStudents() 
{
    printf("\nID\tName\tAge\tCGPA\n");
    for (int i=0;i<studentCount;i++)
    {
      printf("%d\t%s\t%d\t%.2f\n", students[i].id, students[i].name, students[i].age, students[i].cgpa);
    }
}
void searchStudent() 
{
    int id;
    printf("Enter student ID to search: ");
    scanf("%d", &id);
    for (int i = 0; i < studentCount; i++)
    {
        if (students[i].id == id) 
        {
          printf("Student found: %d\t%s\t%d\t%.2f\n", students[i].id, students[i].name, students[i].age, students[i].cgpa);
          return;
        }
    }
    printf("Student not found!\n");
}
void updateStudent() 
{
  int id;
  printf("Enter student ID to update: ");
  scanf("%d", &id);
  for (int i = 0; i < studentCount; i++) 
  {
      if (students[i].id == id) 
      {
        printf("Updating student: %d\t%s\t%d\t%.2f\n", students[i].id, students[i].name, students[i].age, students[i].cgpa);
        printf("Enter new Name: ");
        getchar();
        fgets(students[i].name, sizeof(students[i].name), stdin);
        students[i].name[strcspn(students[i].name, "\n")] = '\0';
        printf("Enter new Age: ");
        scanf("%d", &students[i].age);
        printf("Enter new CGPA: ");
        scanf("%f", &students[i].cgpa);
        printf("Student updated successfully!\n");
        return;
        }
    }
    printf("Student not found!\n");
}
void deleteStudent() 
{
  int id;
  printf("Enter student ID to delete: ");
  scanf("%d", &id);
  for (inti=0;i<studentCount;i++) 
  {
    if (students[i].id == id) 
    {
      for (int j=i;j<studentCount-1;j++) 
      {
        students[j]=students[j+1];
      }
      studentCount--;
      printf("Student deleted successfully!\n");
      return;
    }
  }
  printf("Student not found!\n");
}
void saveToFile() 
{
    FILE *file=fopen(FILE_NAME, "wb");
    if(file) 
    {
      fwrite(&studentCount, sizeof(int), 1, file);
      fwrite(students, sizeof(Student), studentCount, file);
      fclose(file);
      printf("Data saved to file.\n");
    } 
    else 
    {
      printf("Error saving data to file.\n");
    }
}
void loadFromFile() 
{
  FILE *file = fopen(FILE_NAME, "rb");
  if(file) 
  {
    fread(&studentCount, sizeof(int), 1, file);
    fread(students, sizeof(Student), studentCount, file);
    fclose(file);
  }
}
